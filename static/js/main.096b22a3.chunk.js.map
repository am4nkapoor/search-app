{"version":3,"sources":["loader.gif","logo.svg","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","fetchSearchResults","query","cancel","axios","CancelToken","source","get","cancelToken","token","then","res","resultNotFoundMsg","data","results","length","setState","message","loading","loadmore","catch","error","isCancel","handleClick","state","handleOnInputChange","event","target","value","renderSearchResults","Object","keys","className","slice","visible","map","result","key","mal_id","href","image_url","title","src","alt","search","loadMore","bind","this","htmlFor","type","name","id","placeholder","onChange","onClick","Loader","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,2LC6J5BC,E,kDAvJd,WAAaC,GAAS,IAAD,8BACpB,cAAOA,IAuBRC,mBAAqB,SAAEC,GAIlB,EAAKC,QACR,EAAKA,OAAOA,SAGb,EAAKA,OAASC,IAAMC,YAAYC,SAEhCF,IAAMG,IARS,0DAQO,CACrBC,YAAa,EAAKL,OAAOM,QAExBC,MAAM,SAAAC,GACN,IAAMC,EAAsBD,EAAIE,KAAKC,QAAQC,OAErC,GADA,oCAER,EAAKC,SAAU,CACdF,QAASH,EAAIE,KAAKC,QAClBG,QAASL,EACTM,SAAS,EACTC,UAAU,OAGXC,OAAO,SAAAC,IACFjB,IAAMkB,SAASD,IAAUA,IAC7B,EAAKL,SAAS,CACbE,SAAS,EACTD,QAAS,kCApDO,EA0DrBM,YAAc,WACb,IAAMrB,EAAQ,EAAKsB,MAAMtB,MACtBA,GACF,EAAKc,SAAU,CAAEE,SAAS,EAAMD,QAAS,KAAM,WAC9C,EAAKhB,mBAAoB,EAAGC,OA9DV,EAmErBuB,oBAAsB,SAAEC,GACvB,IAAMxB,EAAQwB,EAAMC,OAAOC,MACpB1B,EAGN,EAAKc,SAAU,CAAEd,UAAS,eAF1B,EAAKc,SAAU,CAAEd,QAAOY,QAAS,GAAIG,QAAS,MAtE3B,EA6ErBY,oBAAsB,WAAO,IACpBf,EAAY,EAAKU,MAAjBV,QAER,GAAKgB,OAAOC,KAAMjB,GAAUC,QAAUD,EAAQC,OAC7C,OACC,yBAAKiB,UAAU,qBACZlB,EAAQmB,MAAM,EAAE,EAAKT,MAAMU,SAASC,KAAK,SAAAC,GAC1C,OACC,uBAAGC,IAAMD,EAAOE,OAASC,KAAOH,EAAOI,UAAYR,UAAU,eAC5D,wBAAIA,UAAU,kBAAkBI,EAAOK,OACvC,yBAAKT,UAAU,iBACd,yBAAKA,UAAU,QAAQU,IAAMN,EAAOI,UAAYG,IAAG,UAAKP,EAAOK,MAAZ,iBAMtD,EAAKjB,MAAML,UAAYL,EAAQmB,MAAM,EAAKT,MAAMU,QAAU,GAAGC,KAAK,SAAAC,GAClE,OACC,uBAAGC,IAAMD,EAAOE,OAASC,KAAOH,EAAOI,UAAYR,UAAU,eAC5D,wBAAIA,UAAU,kBAAkBI,EAAOK,OACvC,yBAAKT,UAAU,iBACd,yBAAKA,UAAU,QAAQU,IAAMN,EAAOI,UAAYG,IAAG,UAAKP,EAAOK,MAAZ,mBAhG1D,EAAKjB,MAAQ,CACZtB,MAAO,GACPY,QAAS,GACTI,SAAS,EACND,QAAS,GACT2B,OAAQ,GACXV,QAAS,EACTf,UAAU,GAGT,EAAK0B,SAAW,EAAKA,SAASC,KAAd,gBAClB,EAAK3C,OAAS,GAdM,E,uDA8GlB4C,KAAK/B,SAAS,CACfG,UAAU,M,+BAIF,IAAD,EAC4B4B,KAAKvB,MAAjCtB,EADA,EACAA,MAAOgB,EADP,EACOA,QAASD,EADhB,EACgBA,QACxB,OACC,yBAAKe,UAAU,aAEd,wBAAIA,UAAU,WAAd,qBAGA,2BAAOA,UAAU,eAAegB,QAAQ,gBACvC,2BACCC,KAAK,OACLC,KAAK,QACLtB,MAAQ1B,EACRiD,GAAG,eACHC,YAAY,kCACZC,SAAUN,KAAKtB,sBAEjB,4BAAQO,UAAU,MAAMsB,QAASP,KAAKxB,aAAtC,OAICN,GAAW,uBAAGe,UAAU,WAAYf,GAGrC,yBAAKyB,IAAMa,IAASvB,UAAS,yBAAqBd,EAAU,OAAS,QAAWyB,IAAI,WAGlFI,KAAKlB,sBAGLkB,KAAKvB,MAAMV,QAAQC,OAAS,IAAMgC,KAAKvB,MAAML,UAAa,4BAAQmC,QAASP,KAAKF,SAAUI,KAAK,SAASjB,UAAU,aAAxD,kB,GAnJ3CwB,IAAMC,WCYZC,E,uKARX,OACA,yBAAK1B,UAAU,OACb,kBAAC,EAAD,W,GAJYwB,IAAMC,WCMJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdrD,OAAM,SAAAC,GACLqD,QAAQrD,MAAMA,EAAMJ,c","file":"static/js/main.096b22a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.de50e2e9.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport axios from 'axios';\nimport Loader from '../loader.gif';\n\nclass Search extends React.Component {\n\n\tconstructor( props ) {\n\t\tsuper( props );\n\n\t\tthis.state = {\n\t\t\tquery: '',\n\t\t\tresults: [],\n\t\t\tloading: false,\n      message: '',\n      search: '',\n\t\t\tvisible: 6,\n\t\t\tloadmore: false,\n    };\n    \n    this.loadMore = this.loadMore.bind(this) \n\t\tthis.cancel = '';\n\t}\n\n\t/**\n\t * Fetch the search results and update the state with the result.\n\t * Also cancels the previous query before making the new one.\n\t *\n\t * @param {String} query Search Query.\n\t *\n\t */\n\tfetchSearchResults = ( query ) => {\n\n\t\tconst searchUrl = `https://api.jikan.moe/v3/search/anime?q=naruto&limit=16`;\n\n\t\tif( this.cancel ) {\n\t\t\tthis.cancel.cancel();\n\t\t}\n\n\t\tthis.cancel = axios.CancelToken.source();\n\n\t\taxios.get( searchUrl, {\n\t\t\tcancelToken: this.cancel.token\n\t\t} )\n\t\t\t.then( res => {\n\t\t\t\tconst resultNotFoundMsg = ! res.data.results.length\n\t\t\t\t\t\t\t\t\t\t? 'There are no more search results.'\n\t\t\t\t\t\t\t\t\t\t: '';\n\t\t\t\tthis.setState( {\n\t\t\t\t\tresults: res.data.results,\n\t\t\t\t\tmessage: resultNotFoundMsg,\n\t\t\t\t\tloading: false,\n\t\t\t\t\tloadmore: false\n\t\t\t\t} )\n\t\t\t} )\n\t\t\t.catch( error => {\n\t\t\t\tif ( axios.isCancel(error) || error ) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tloading: false,\n\t\t\t\t\t\tmessage: 'Failed to fetch the data.'\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} )\n\t};\n\n\thandleClick = () => {\n\t\tconst query = this.state.query;\n\t\tif(query){\n\t\t\tthis.setState( { loading: true, message: '' }, () => {\n\t\t\t\tthis.fetchSearchResults( 1, query );\n\t\t\t} );\n\t\t}\n\t};\n\n\thandleOnInputChange = ( event ) => {\n\t\tconst query = event.target.value;\n\t\tif ( ! query ) {\n\t\t\tthis.setState( { query, results: {}, message: '' } );\n\t\t} else {\n\t\t\tthis.setState( { query }, () => {\n\t\t\t} );\n\t\t}\n\t};\n\n\trenderSearchResults = () => {\n\t\tconst { results } = this.state;\n\n\t\tif ( Object.keys( results ).length && results.length ) {\n\t\t\treturn (\n\t\t\t\t<div className=\"results-container\">\n\t\t\t\t\t{ results.slice(0,this.state.visible).map( result => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<a key={ result.mal_id } href={ result.image_url } className=\"result-item\">\n\t\t\t\t\t\t\t\t<h6 className=\"image-username\">{result.title}</h6>\n\t\t\t\t\t\t\t\t<div className=\"image-wrapper\">\n\t\t\t\t\t\t\t\t\t<img className=\"image\" src={ result.image_url } alt={`${result.title} image`}/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t)\n\t\t\t\t\t} ) }\n\n\t\t\t\t{ this.state.loadmore && results.slice(this.state.visible + 1).map( result => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<a key={ result.mal_id } href={ result.image_url } className=\"result-item\">\n\t\t\t\t\t\t\t\t<h6 className=\"image-username\">{result.title}</h6>\n\t\t\t\t\t\t\t\t<div className=\"image-wrapper\">\n\t\t\t\t\t\t\t\t\t<img className=\"image\" src={ result.image_url } alt={`${result.title} image`}/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t)\n\t\t\t\t\t} ) }\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n  };\n\n  loadMore () {\n    this.setState({\n\t\t\tloadmore: true,\n    })\n\t}\n\n\trender() {\n\t\tconst { query, loading, message } = this.state;\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t{/*\tHeading*/}\n\t\t\t\t<h2 className=\"heading\">Assignment Spinny</h2>\n\t\t\t\t\n\t\t\t\t{/* Search Input*/}\n\t\t\t\t<label className=\"search-label\" htmlFor=\"search-input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tname=\"query\"\n\t\t\t\t\t\tvalue={ query }\n\t\t\t\t\t\tid=\"search-input\"\n\t\t\t\t\t\tplaceholder=\"search for an anime, e.g Naruto\"\n\t\t\t\t\t\tonChange={this.handleOnInputChange}\n\t\t\t\t\t/>\n\t\t\t\t<button className=\"btn\" onClick={this.handleClick}>GO</button>\n\t\t\t\t</label>\n\n\t\t\t\t{/*\tError Message*/}\n\t\t\t\t{message && <p className=\"message\">{ message }</p>}\n\n\t\t\t\t{/*\tLoader*/}\n\t\t\t\t<img src={ Loader } className={`search-loading ${ loading ? 'show' : 'hide' }`} alt=\"loader\"/>\n\n\t\t\t\t{/*\tResult*/}\n\t\t\t\t{ this.renderSearchResults() }\n\n\t\t\t\t{/*Load More*/}\n\t\t\t\t{(this.state.results.length > 0 && !this.state.loadmore) && <button onClick={this.loadMore} type=\"button\" className=\"load-more\">Load more</button>} \n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Search\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Search from './Components/Search'\n\nclass App extends React.Component {\n  render() { \n    return ( \n    <div className=\"App\">\n      <Search />\n    </div>\n    );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}